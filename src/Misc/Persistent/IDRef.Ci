// File: IDRef.Ci Manages use and IO of an ID'd object, that is not owned.


#include "Misc/UniqueID/UniqueID.H"
#include "Misc/Persistent/IDRef.H"
#include "oml/imp/binio.h"
#include <iostream>
#include <cassert>
#include <string>
#include <stdlib.h>
#include <typeinfo>

#ifndef TYPE_STRING
#error "IDRef<T> TYPE_STRING not defined in IDRef.C"
#endif

#if DEBUG
#define CHECK Check()
#else
#define CHECK
#endif

//
//  Here p is first inserted into the global data base.  If another
//  instnace of the object is not in there then p is returned
//  If another instance is in there then p is deleted and the
//  other pointer is returned.
//
template <class T> IDRef<T>::IDRef(T* p)
    : itsPointer(p)
    , itsID(itsPointer->GetID())
{};

template <class T> void IDRef<T>::FixUpPointer(T* p)
{
    if (itsID!=p->GetID())
    {
        std::cerr << "IDRef<" << TYPE_STRING << "> attempted to fix up pointer with wrong ID" << std::endl;
        std::cerr << "itsID = " << itsID << ",  pointers ID = " << p->GetID() << std::endl;
        exit(-1);
    }
    itsPointer=p;
}

//
//  Just need to pickle the ID.
//
template <class T> std::ostream& IDRef<T>::Write(std::ostream& os) const
{
    if (StreamableObject::Binary())
        BinaryWrite(itsID,os);
    else
        os << itsID << " ";
    return os;
}

//
//  From the ID only the pointer is dug out of the datas base.
//
template <class T> std::istream& IDRef<T>::Read(std::istream& is)
{
    if (StreamableObject::Binary())
        BinaryRead(itsID,is);
    else
    {
        is >> itsID;
        is.get();
    }
    return is;
}

template <class T> void IDRef<T>::Check() const
{
    if (!itsID                    )
    {
        std::cerr << "IDRef<" << TYPE_STRING << "> itsID = 0" << std::endl;
        assert(false);
    }
    if (!itsPointer               )
    {
        std::cerr << "IDRef<" << TYPE_STRING << "> itsPointer = 0" << std::endl;
        assert(false);
    }
    if (itsID!=itsPointer->GetID())
    {
        std::cerr << "IDRef<" << TYPE_STRING << "> itsID!=itsPointer->GetID()" << std::endl;
        std::cerr << "itsID = " << itsID << ",  itsPointer ID = " << itsPointer->GetID() << std::endl;
        assert(false);
    }
}

/*template <class T> string IDRef<T>::Type() const
{
  if(this);
  return "IDRef<" TYPE_STRING ">";
}*/

template <class T> IDRef<T>* IDRef<T>::Clone() const
{
    return new IDRef<T>(*this);
}

template <class T> IDRef<T>* IDRef<T>::Factory(std::istream& is)
{
    IDRef<T>* ret=0;
    std::string Name=StreamableObject::PeekAtName(is);
    if (Name==typeid(IDRef<T>*).name()) ret= new IDRef<T>;

    if (!ret) std::cerr << "IDRef<T>::Factory Unknown object type :" << Name << std::endl;
    return ret;
}



#undef CHECK

