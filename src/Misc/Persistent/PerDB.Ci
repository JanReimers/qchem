// File: PerDB.h  Manage a global list of ID object *'s.


#include "Misc/Persistent/PerDB.H"
#include "Misc/ptrvector_io.h"
#include <iostream>


#ifndef TYPE_STRING
#error "PerDB<T> TYPE_STRING not defined"
#endif

template <class T> PerDB<T>::PerDB()
{
    if (thePerDB)
    {
        std::cerr << "PerDB<" TYPE_STRING ">::""PerDB<" TYPE_STRING "> is a Singlton" << std::endl;
        exit(-1);
    }
    thePerDB=this;
}

template <class T> T* PerDB<T>::GetPointerFor(UniqueID::IDtype theID)
{
    if (!thePerDB)
    {
        std::cerr << "PerDB<" TYPE_STRING ">::GetPointerFor thePerDB not defined" << std::endl;
        exit(-1);
    }
    T* ret=0;
    typename optr_vector<T*>::iterator b(PerDB<T>::thePerDB->itsPointerList.begin());
    for (; b!=PerDB<T>::thePerDB->itsPointerList.end(); b++)
        if (b->GetID() == theID)
        {
            ret=&b;
            break;
        }
    if(!ret)
    {
        std::cerr << "PerDB<" TYPE_STRING "> Can't find ID " << theID << std::endl;
        std::cerr << "There are " << PerDB<T>::thePerDB->itsPointerList.size()
                  << " ID's in the list :";
        typename optr_vector<T*>::const_iterator b1(PerDB<T>::thePerDB->itsPointerList.begin());
        for (; b1!=PerDB<T>::thePerDB->itsPointerList.end(); b1++)
        {
            std::cout << b1->GetID() << " ";
        }
        std::cerr << std::endl;

        exit(-1);
    }
    return ret;
}

//
//  if ID for p is in list but p is not, then delete p, issue warning and return the correct pointer.
//  if ID for p is in lits and so is p, then just return p.
//  if ID is not in list, and a duplicate IS in, just return the real pointer and delete p.
//  if ID is not in list, and a duplicate is not in, insert p and return p.
//
template <class T> T* PerDB<T>::Insert(T* p)
{
    UniqueID::IDtype id=p->GetID();
    T* ret=p;
    if (thePerDB->Has(id))
    {
        ret=GetPointerFor(id);
        if (p!=ret)
        {
            std::cerr << "PerDB<T>::Insert ***Warning*** reseating a duplicated " TYPE_STRING " pointer" << std::endl;
            delete p;
        }
    }
    else
    {
        id=thePerDB->Find(*p);
        if (!id)
        {
            thePerDB->itsPointerList.push_back(p);
//            std::cout << "PerDB Insert pointer n=" << thePerDB->itsPointerList.size() << std::endl;
        }
        else
        {
            std::cerr << "PerDB<T>::Insert ***Warning*** found duplicate objects" << std::endl;
            std::cerr << "ID :" << id << " was already in the data base, attempted to add " << p->GetID() << std::endl;
            std::cerr << "Type was " TYPE_STRING << std::endl;
            delete p;
            ret=GetPointerFor(id);
        }
    }
    return ret;
}

template <class T> bool PerDB<T>::StaticHas(UniqueID::IDtype id)
{
    if (!thePerDB)
    {
        std::cerr << "PerDB<" TYPE_STRING ">::StaticHas thePerDB not defined" << std::endl;
        exit(-1);
    }
    return thePerDB->Has(id);
}

template <class T> UniqueID::IDtype PerDB<T>::Find(const T& p) const
{
    UniqueID::IDtype ret=0;
    typename optr_vector<T*>::const_iterator b(itsPointerList.begin());
    for (; b!=itsPointerList.end(); b++)
        if ((*b)==p)
        {
            ret=b->GetID();
            break;
        }
    return ret;
}

template <class T> bool PerDB<T>::Has(UniqueID::IDtype theID) const
{
    bool ret=false;
    typename optr_vector<T*>::const_iterator b(itsPointerList.begin());
    for (; b!=itsPointerList.end(); b++)
        if (b->GetID() == theID)
        {
            ret=true;
            break;
        }
    return ret;
}

template <class T> void PerDB<T>::Delete(UniqueID::IDtype theID)
{
    typename optr_vector<T*>::iterator i(itsPointerList.begin());
    for (index_t n=0; i!=itsPointerList.end(); n++,i++)
        if (i->GetID() == theID)
        {
            itsPointerList.erase(i);
            break;
        }
}


template <class T> std::ostream& PerDB<T>::Write(std::ostream& os) const
{
//    std::cout << "PerDB<T>::Write n=" << itsPointerList.size() << std::endl;
    os << itsPointerList;
    return os;
}

template <class T> std::istream& PerDB<T>::Read(std::istream& is)
{
    is >> itsPointerList;
    return is;
}

template <class T> void PerDB<T>::Dump(std::ostream& os) const
{
    os << "------------DataBase-------------" << std::endl;
    typename optr_vector<T*>::const_iterator b(itsPointerList.begin());
    for (; b!=itsPointerList.end(); b++)
    {
        os << b->GetID() << " " << (void*)&b << std::endl;
    }

}
template <class T>    void PerDB<T>::Clear()
{
    itsPointerList.clear();
}
//template <class T> PerDB<T>* PerDB<T>::Clone() const
//{
//  return new PerDB<T>(*this);
//}




