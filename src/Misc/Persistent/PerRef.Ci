// File: PerRef.C Manages use and IO of an ID'd object, that is not owned.


#include "Misc/UniqueID/UniqueID.H"
#include "Misc/Persistent/PerRef.H"
#include "Misc/Persistent/PerDB.H"
#include "oml/imp/binio.h"
#include <iostream>
#include <cassert>
#include <typeinfo>
#include <string>
#include <stdlib.h>

#ifndef TYPE_STRING
#error "PerRef<T> TYPE_STRING not defined in PerRef.C"
#endif

#if DEBUG
#define CHECK Check()
#else
#define CHECK
#endif

//
//  Here p is first inserted into the global data base.  If another
//  instnace of the object is not in there then p is returned
//  If another instance is in there then p is deleted and the
//  other pointer is returned.
//
template <class T> PerRef<T>::PerRef(T* p)
  : itsPointer(PerDB<T>::Insert(p))
  , itsID(itsPointer->GetID())
  {};
//
//  Just need to pickle the ID.
//
template <class T> std::ostream& PerRef<T>::Write(std::ostream& os) const
{
  CHECK;
  if (StreamableObject::Binary())
  {
    BinaryWrite(itsID,os);
  }
  else
  {
    os << itsID;
  }
  return os << " 0 " << typeid(*itsPointer).name() << " ";
}

//
//  From the ID only the pointer is dug out of the datas base.
//
template <class T> std::istream& PerRef<T>::Read(std::istream& is)
{
  if (StreamableObject::Binary())
  {
    BinaryRead(itsID,is);
  }
  else
  {
    is >> itsID;
  }

	if (PerDB<T>::StaticHas(itsID))
	{
		itsPointer = PerDB<T>::GetPointerFor(itsID);
	}
	else
	{
//		cout << "can't find id=" << itsID << std::endl;
//		cout << "PerRef<" << TYPE_STRING << "> created fresh object" << std::endl;
		itsPointer=PerDB<T>::Insert(T::Factory(is));
		itsID=itsPointer->GetID();
	}

	int dummy;
	is >> dummy;
	std::string type;
	is >> type; //Don't need this.

  CHECK;
  return is;
}

template <class T> void PerRef<T>::Check() const
{
  if (!itsID                    )
  {
    std::cerr << "PerRef<" << TYPE_STRING << "> itsID = 0" << std::endl;
    assert(false);
  }
  if (!itsPointer               )
  {
    std::cerr << "PerRef<" << TYPE_STRING << "> itsPointer = 0" << std::endl;
    assert(false);
  }
  if (itsID!=itsPointer->GetID())
  {
    std::cerr << "PerRef<" << TYPE_STRING << "> itsID!=itsPointer->GetID()" << std::endl;
    assert(false);
  }
}

/*template <class T> string PerRef<T>::Type() const
{
  if(this);
  return "PerRef<" TYPE_STRING ">";
}*/

template <class T> PerRef<T>* PerRef<T>::Clone() const
{
  return new PerRef<T>(*this);
}

template <class T> PerRef<T>* PerRef<T>::Factory(std::istream& is)
{
  std::string Name=PeekAtName(is);
  if (Name=="PerRef<" TYPE_STRING ">") return new PerRef<T>;

  std::cout << "Unknown persistent reference type :" << Name << std::endl;
  exit(-1);
  return NULL;
}



#undef CHECK

