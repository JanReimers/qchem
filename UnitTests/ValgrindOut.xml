<?xml version="1.0"?>

<valgrindoutput>

<protocolversion>4</protocolversion>
<protocoltool>memcheck</protocoltool>

<preamble>
  <line>Memcheck, a memory error detector</line>
  <line>Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.</line>
  <line>Using Valgrind-3.22.0 and LibVEX; rerun with -h for copyright info</line>
  <line>Command: /home/janr/Code/qchem/UnitTests/../qchemUT</line>
</preamble>

<pid>51195</pid>
<ppid>4986</ppid>
<tool>memcheck</tool>

<args>
  <vargv>
    <exe>/usr/bin/valgrind.bin</exe>
    <arg>--leak-check=full</arg>
    <arg>--track-origins=yes</arg>
    <arg>--xml=yes</arg>
    <arg>--xml-file=/home/janr/Code/qchem/UnitTests/ValgrindOut.xml</arg>
  </vargv>
  <argv>
    <exe>/home/janr/Code/qchem/UnitTests/../qchemUT</exe>
  </argv>
</args>

<status>
  <state>RUNNING</state>
  <time>00:00:00:00.122 </time>
</status>

<error>
  <unique>0x0</unique>
  <tid>1</tid>
  <kind>InvalidRead</kind>
  <what>Invalid read of size 8</what>
  <stack>
    <frame>
      <ip>0x1FEBA5</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>PerDB&lt;IntegralDataBase&lt;double&gt; &gt;::Has(int) const</fn>
      <dir>/home/janr/Code/qchem/src/Misc/Persistent</dir>
      <file>PerDB.Ci</file>
      <line>120</line>
    </frame>
    <frame>
      <ip>0x1FE8A0</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>PerDB&lt;IntegralDataBase&lt;double&gt; &gt;::Insert(IntegralDataBase&lt;double&gt;*)</fn>
      <dir>/home/janr/Code/qchem/src/Misc/Persistent</dir>
      <file>PerDB.Ci</file>
      <line>65</line>
    </frame>
    <frame>
      <ip>0x1FDA4E</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>PerRef&lt;IntegralDataBase&lt;double&gt; &gt;::PerRef(IntegralDataBase&lt;double&gt;*)</fn>
      <dir>/home/janr/Code/qchem/src/Misc/Persistent</dir>
      <file>PerRef.Ci</file>
      <line>31</line>
    </frame>
    <frame>
      <ip>0x1CC644</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>TBasisSetImplementation&lt;double&gt;::TBasisSetImplementation(LinearAlgebraParams const&amp;, IntegralDataBase&lt;double&gt;*)</fn>
      <dir>/home/janr/Code/qchem/src/BasisSetImplementation</dir>
      <file>TBasisSetImplementation.C</file>
      <line>36</line>
    </frame>
    <frame>
      <ip>0x1C50E6</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>SphericalGaussianBS::SphericalGaussianBS(LinearAlgebraParams const&amp;, IntegralDataBase&lt;double&gt;*, unsigned long, double, double, unsigned long, Mesh*)</fn>
      <dir>/home/janr/Code/qchem/src/BasisSetImplementation/SphericalGaussian</dir>
      <file>SphericalGaussianBS.C</file>
      <line>45</line>
    </frame>
    <frame>
      <ip>0x164FD8</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>qchem_EigenSolverTests::Init(unsigned long, double, double, unsigned long, LinearAlgebraParams const&amp;)</fn>
      <dir>/home/janr/Code/qchem/UnitTests</dir>
      <file>EigenSolverUT.C</file>
      <line>45</line>
    </frame>
    <frame>
      <ip>0x163EAE</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>qchem_EigenSolverTests_MinSVEVTests_Test::TestBody()</fn>
      <dir>/home/janr/Code/qchem/UnitTests</dir>
      <file>EigenSolverUT.C</file>
      <line>65</line>
    </frame>
    <frame>
      <ip>0x319916</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x311AAE</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x2E9867</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x2EA391</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x2EAD7D</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>testing::TestSuite::Run()</fn>
    </frame>
  </stack>
  <auxwhat>Address 0x5cab6a0 is 0 bytes inside a block of size 1,120 free'd</auxwhat>
  <stack>
    <frame>
      <ip>0x484A61D</ip>
      <obj>/usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so</obj>
      <fn>operator delete(void*, unsigned long)</fn>
    </frame>
    <frame>
      <ip>0x1FD572</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>HeapDB&lt;double&gt;::~HeapDB()</fn>
      <dir>/home/janr/Code/qchem/src/DFTDataBase/HeapDB</dir>
      <file>HeapDB.H</file>
      <line>18</line>
    </frame>
    <frame>
      <ip>0x164F30</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>qchem_EigenSolverTests::Init(unsigned long, double, double, unsigned long, LinearAlgebraParams const&amp;)</fn>
      <dir>/home/janr/Code/qchem/UnitTests</dir>
      <file>EigenSolverUT.C</file>
      <line>41</line>
    </frame>
    <frame>
      <ip>0x163EAE</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>qchem_EigenSolverTests_MinSVEVTests_Test::TestBody()</fn>
      <dir>/home/janr/Code/qchem/UnitTests</dir>
      <file>EigenSolverUT.C</file>
      <line>65</line>
    </frame>
    <frame>
      <ip>0x319916</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x311AAE</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x2E9867</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x2EA391</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x2EAD7D</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>testing::TestSuite::Run()</fn>
    </frame>
    <frame>
      <ip>0x2FC240</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x31AA0B</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x312E40</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
  </stack>
  <auxwhat>Block was alloc'd at</auxwhat>
  <stack>
    <frame>
      <ip>0x4846FA3</ip>
      <obj>/usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so</obj>
      <fn>operator new(unsigned long)</fn>
    </frame>
    <frame>
      <ip>0x164F56</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>qchem_EigenSolverTests::Init(unsigned long, double, double, unsigned long, LinearAlgebraParams const&amp;)</fn>
      <dir>/home/janr/Code/qchem/UnitTests</dir>
      <file>EigenSolverUT.C</file>
      <line>44</line>
    </frame>
    <frame>
      <ip>0x163EAE</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>qchem_EigenSolverTests_MinSVEVTests_Test::TestBody()</fn>
      <dir>/home/janr/Code/qchem/UnitTests</dir>
      <file>EigenSolverUT.C</file>
      <line>65</line>
    </frame>
    <frame>
      <ip>0x319916</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x311AAE</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x2E9867</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x2EA391</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x2EAD7D</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>testing::TestSuite::Run()</fn>
    </frame>
    <frame>
      <ip>0x2FC240</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x31AA0B</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x312E40</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x2FA707</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x1</unique>
  <tid>1</tid>
  <kind>InvalidRead</kind>
  <what>Invalid read of size 4</what>
  <stack>
    <frame>
      <ip>0x177FAA</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>UniqueID::GetID() const</fn>
      <dir>/home/janr/Code/qchem/src/Misc/UniqueID</dir>
      <file>UniqueID.H</file>
      <line>33</line>
    </frame>
    <frame>
      <ip>0x1FEBC0</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>PerDB&lt;IntegralDataBase&lt;double&gt; &gt;::Has(int) const</fn>
      <dir>/home/janr/Code/qchem/src/Misc/Persistent</dir>
      <file>PerDB.Ci</file>
      <line>120</line>
    </frame>
    <frame>
      <ip>0x1FE8A0</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>PerDB&lt;IntegralDataBase&lt;double&gt; &gt;::Insert(IntegralDataBase&lt;double&gt;*)</fn>
      <dir>/home/janr/Code/qchem/src/Misc/Persistent</dir>
      <file>PerDB.Ci</file>
      <line>65</line>
    </frame>
    <frame>
      <ip>0x1FDA4E</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>PerRef&lt;IntegralDataBase&lt;double&gt; &gt;::PerRef(IntegralDataBase&lt;double&gt;*)</fn>
      <dir>/home/janr/Code/qchem/src/Misc/Persistent</dir>
      <file>PerRef.Ci</file>
      <line>31</line>
    </frame>
    <frame>
      <ip>0x1CC644</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>TBasisSetImplementation&lt;double&gt;::TBasisSetImplementation(LinearAlgebraParams const&amp;, IntegralDataBase&lt;double&gt;*)</fn>
      <dir>/home/janr/Code/qchem/src/BasisSetImplementation</dir>
      <file>TBasisSetImplementation.C</file>
      <line>36</line>
    </frame>
    <frame>
      <ip>0x1C50E6</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>SphericalGaussianBS::SphericalGaussianBS(LinearAlgebraParams const&amp;, IntegralDataBase&lt;double&gt;*, unsigned long, double, double, unsigned long, Mesh*)</fn>
      <dir>/home/janr/Code/qchem/src/BasisSetImplementation/SphericalGaussian</dir>
      <file>SphericalGaussianBS.C</file>
      <line>45</line>
    </frame>
    <frame>
      <ip>0x164FD8</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>qchem_EigenSolverTests::Init(unsigned long, double, double, unsigned long, LinearAlgebraParams const&amp;)</fn>
      <dir>/home/janr/Code/qchem/UnitTests</dir>
      <file>EigenSolverUT.C</file>
      <line>45</line>
    </frame>
    <frame>
      <ip>0x163EAE</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>qchem_EigenSolverTests_MinSVEVTests_Test::TestBody()</fn>
      <dir>/home/janr/Code/qchem/UnitTests</dir>
      <file>EigenSolverUT.C</file>
      <line>65</line>
    </frame>
    <frame>
      <ip>0x319916</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x311AAE</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x2E9867</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x2EA391</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
  </stack>
  <auxwhat>Address 0x5ff35e8 is 3,198,408 bytes inside an unallocated block of size 3,528,640 in arena "client"</auxwhat>
</error>

<error>
  <unique>0x2</unique>
  <tid>1</tid>
  <kind>InvalidRead</kind>
  <what>Invalid read of size 8</what>
  <stack>
    <frame>
      <ip>0x1FEABB</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>PerDB&lt;IntegralDataBase&lt;double&gt; &gt;::Find(IntegralDataBase&lt;double&gt; const&amp;) const</fn>
      <dir>/home/janr/Code/qchem/src/Misc/Persistent</dir>
      <file>PerDB.Ci</file>
      <line>108</line>
    </frame>
    <frame>
      <ip>0x1FE922</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>PerDB&lt;IntegralDataBase&lt;double&gt; &gt;::Insert(IntegralDataBase&lt;double&gt;*)</fn>
      <dir>/home/janr/Code/qchem/src/Misc/Persistent</dir>
      <file>PerDB.Ci</file>
      <line>76</line>
    </frame>
    <frame>
      <ip>0x1FDA4E</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>PerRef&lt;IntegralDataBase&lt;double&gt; &gt;::PerRef(IntegralDataBase&lt;double&gt;*)</fn>
      <dir>/home/janr/Code/qchem/src/Misc/Persistent</dir>
      <file>PerRef.Ci</file>
      <line>31</line>
    </frame>
    <frame>
      <ip>0x1CC644</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>TBasisSetImplementation&lt;double&gt;::TBasisSetImplementation(LinearAlgebraParams const&amp;, IntegralDataBase&lt;double&gt;*)</fn>
      <dir>/home/janr/Code/qchem/src/BasisSetImplementation</dir>
      <file>TBasisSetImplementation.C</file>
      <line>36</line>
    </frame>
    <frame>
      <ip>0x1C50E6</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>SphericalGaussianBS::SphericalGaussianBS(LinearAlgebraParams const&amp;, IntegralDataBase&lt;double&gt;*, unsigned long, double, double, unsigned long, Mesh*)</fn>
      <dir>/home/janr/Code/qchem/src/BasisSetImplementation/SphericalGaussian</dir>
      <file>SphericalGaussianBS.C</file>
      <line>45</line>
    </frame>
    <frame>
      <ip>0x164FD8</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>qchem_EigenSolverTests::Init(unsigned long, double, double, unsigned long, LinearAlgebraParams const&amp;)</fn>
      <dir>/home/janr/Code/qchem/UnitTests</dir>
      <file>EigenSolverUT.C</file>
      <line>45</line>
    </frame>
    <frame>
      <ip>0x163EAE</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>qchem_EigenSolverTests_MinSVEVTests_Test::TestBody()</fn>
      <dir>/home/janr/Code/qchem/UnitTests</dir>
      <file>EigenSolverUT.C</file>
      <line>65</line>
    </frame>
    <frame>
      <ip>0x319916</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x311AAE</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x2E9867</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x2EA391</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x2EAD7D</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>testing::TestSuite::Run()</fn>
    </frame>
  </stack>
  <auxwhat>Address 0x5cab6a0 is 0 bytes inside a block of size 1,120 free'd</auxwhat>
  <stack>
    <frame>
      <ip>0x484A61D</ip>
      <obj>/usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so</obj>
      <fn>operator delete(void*, unsigned long)</fn>
    </frame>
    <frame>
      <ip>0x1FD572</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>HeapDB&lt;double&gt;::~HeapDB()</fn>
      <dir>/home/janr/Code/qchem/src/DFTDataBase/HeapDB</dir>
      <file>HeapDB.H</file>
      <line>18</line>
    </frame>
    <frame>
      <ip>0x164F30</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>qchem_EigenSolverTests::Init(unsigned long, double, double, unsigned long, LinearAlgebraParams const&amp;)</fn>
      <dir>/home/janr/Code/qchem/UnitTests</dir>
      <file>EigenSolverUT.C</file>
      <line>41</line>
    </frame>
    <frame>
      <ip>0x163EAE</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>qchem_EigenSolverTests_MinSVEVTests_Test::TestBody()</fn>
      <dir>/home/janr/Code/qchem/UnitTests</dir>
      <file>EigenSolverUT.C</file>
      <line>65</line>
    </frame>
    <frame>
      <ip>0x319916</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x311AAE</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x2E9867</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x2EA391</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x2EAD7D</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>testing::TestSuite::Run()</fn>
    </frame>
    <frame>
      <ip>0x2FC240</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x31AA0B</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x312E40</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
  </stack>
  <auxwhat>Block was alloc'd at</auxwhat>
  <stack>
    <frame>
      <ip>0x4846FA3</ip>
      <obj>/usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so</obj>
      <fn>operator new(unsigned long)</fn>
    </frame>
    <frame>
      <ip>0x164F56</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>qchem_EigenSolverTests::Init(unsigned long, double, double, unsigned long, LinearAlgebraParams const&amp;)</fn>
      <dir>/home/janr/Code/qchem/UnitTests</dir>
      <file>EigenSolverUT.C</file>
      <line>44</line>
    </frame>
    <frame>
      <ip>0x163EAE</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>qchem_EigenSolverTests_MinSVEVTests_Test::TestBody()</fn>
      <dir>/home/janr/Code/qchem/UnitTests</dir>
      <file>EigenSolverUT.C</file>
      <line>65</line>
    </frame>
    <frame>
      <ip>0x319916</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x311AAE</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x2E9867</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x2EA391</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x2EAD7D</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>testing::TestSuite::Run()</fn>
    </frame>
    <frame>
      <ip>0x2FC240</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x31AA0B</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x312E40</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x2FA707</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
  </stack>
</error>

<fatal_signal>
  <tid>1</tid>
  <signo>11</signo>
  <signame>SIGSEGV</signame>
  <sicode>2</sicode>
  <event>Bad permissions for mapped region</event>
  <siaddr>0x3481C4</siaddr>
  <stack>
    <frame>
      <ip>0x3481C4</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
    </frame>
    <frame>
      <ip>0x1FE922</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>PerDB&lt;IntegralDataBase&lt;double&gt; &gt;::Insert(IntegralDataBase&lt;double&gt;*)</fn>
      <dir>/home/janr/Code/qchem/src/Misc/Persistent</dir>
      <file>PerDB.Ci</file>
      <line>76</line>
    </frame>
    <frame>
      <ip>0x1FDA4E</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>PerRef&lt;IntegralDataBase&lt;double&gt; &gt;::PerRef(IntegralDataBase&lt;double&gt;*)</fn>
      <dir>/home/janr/Code/qchem/src/Misc/Persistent</dir>
      <file>PerRef.Ci</file>
      <line>31</line>
    </frame>
    <frame>
      <ip>0x1CC644</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>TBasisSetImplementation&lt;double&gt;::TBasisSetImplementation(LinearAlgebraParams const&amp;, IntegralDataBase&lt;double&gt;*)</fn>
      <dir>/home/janr/Code/qchem/src/BasisSetImplementation</dir>
      <file>TBasisSetImplementation.C</file>
      <line>36</line>
    </frame>
    <frame>
      <ip>0x1C50E6</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>SphericalGaussianBS::SphericalGaussianBS(LinearAlgebraParams const&amp;, IntegralDataBase&lt;double&gt;*, unsigned long, double, double, unsigned long, Mesh*)</fn>
      <dir>/home/janr/Code/qchem/src/BasisSetImplementation/SphericalGaussian</dir>
      <file>SphericalGaussianBS.C</file>
      <line>45</line>
    </frame>
    <frame>
      <ip>0x164FD8</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>qchem_EigenSolverTests::Init(unsigned long, double, double, unsigned long, LinearAlgebraParams const&amp;)</fn>
      <dir>/home/janr/Code/qchem/UnitTests</dir>
      <file>EigenSolverUT.C</file>
      <line>45</line>
    </frame>
    <frame>
      <ip>0x163EAE</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>qchem_EigenSolverTests_MinSVEVTests_Test::TestBody()</fn>
      <dir>/home/janr/Code/qchem/UnitTests</dir>
      <file>EigenSolverUT.C</file>
      <line>65</line>
    </frame>
    <frame>
      <ip>0x319916</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x311AAE</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x2E9867</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x2EA391</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x2EAD7D</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>testing::TestSuite::Run()</fn>
    </frame>
  </stack>
</fatal_signal>


<status>
  <state>FINISHED</state>
  <time>00:00:00:04.230 </time>
</status>

<error>
  <unique>0x63</unique>
  <tid>1</tid>
  <kind>Leak_DefinitelyLost</kind>
  <xwhat>
    <text>8 bytes in 1 blocks are definitely lost in loss record 97 of 412</text>
    <leakedbytes>8</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x48485C3</ip>
      <obj>/usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so</obj>
      <fn>operator new[](unsigned long)</fn>
    </frame>
    <frame>
      <ip>0x1D1781</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>cow_array&lt;Vector3D&lt;double&gt; &gt;::cow_array(unsigned long)</fn>
      <dir>/home/janr/Code/qchem/../oml/include/oml/imp</dir>
      <file>cow.h</file>
      <line>53</line>
    </frame>
    <frame>
      <ip>0x2AAD2F</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>Matrix&lt;Vector3D&lt;double&gt; &gt;::Matrix()</fn>
      <dir>/home/janr/Code/oml/./src</dir>
      <file>matrix.cpp</file>
      <line>23</line>
    </frame>
    <frame>
      <ip>0x20808B</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>VectorFunctionBuffer&lt;double&gt;::VectorFunctionBuffer(bool, bool)</fn>
      <dir>/home/janr/Code/qchem/src/FunctionsImp</dir>
      <file>VectorFunctionBuffer.C</file>
      <line>26</line>
    </frame>
    <frame>
      <ip>0x1CC53A</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>TBasisSetImplementation&lt;double&gt;::TBasisSetImplementation(LinearAlgebraParams const&amp;, IntegralDataBase&lt;double&gt;*)</fn>
      <dir>/home/janr/Code/qchem/src/BasisSetImplementation</dir>
      <file>TBasisSetImplementation.C</file>
      <line>37</line>
    </frame>
    <frame>
      <ip>0x1C50E6</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>SphericalGaussianBS::SphericalGaussianBS(LinearAlgebraParams const&amp;, IntegralDataBase&lt;double&gt;*, unsigned long, double, double, unsigned long, Mesh*)</fn>
      <dir>/home/janr/Code/qchem/src/BasisSetImplementation/SphericalGaussian</dir>
      <file>SphericalGaussianBS.C</file>
      <line>45</line>
    </frame>
    <frame>
      <ip>0x164FD8</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>qchem_EigenSolverTests::Init(unsigned long, double, double, unsigned long, LinearAlgebraParams const&amp;)</fn>
      <dir>/home/janr/Code/qchem/UnitTests</dir>
      <file>EigenSolverUT.C</file>
      <line>45</line>
    </frame>
    <frame>
      <ip>0x163EAE</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>qchem_EigenSolverTests_MinSVEVTests_Test::TestBody()</fn>
      <dir>/home/janr/Code/qchem/UnitTests</dir>
      <file>EigenSolverUT.C</file>
      <line>65</line>
    </frame>
    <frame>
      <ip>0x319916</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x311AAE</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x2E9867</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x2EA391</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x192</unique>
  <tid>1</tid>
  <kind>Leak_PossiblyLost</kind>
  <xwhat>
    <text>1,008 bytes in 3 blocks are possibly lost in loss record 400 of 412</text>
    <leakedbytes>1008</leakedbytes>
    <leakedblocks>3</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x484D953</ip>
      <obj>/usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so</obj>
      <fn>calloc</fn>
    </frame>
    <frame>
      <ip>0x40145AB</ip>
      <obj>/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2</obj>
      <fn>calloc</fn>
      <dir>./elf/../include</dir>
      <file>rtld-malloc.h</file>
      <line>44</line>
    </frame>
    <frame>
      <ip>0x40145AB</ip>
      <obj>/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2</obj>
      <fn>allocate_dtv</fn>
      <dir>./elf/../elf</dir>
      <file>dl-tls.c</file>
      <line>370</line>
    </frame>
    <frame>
      <ip>0x40145AB</ip>
      <obj>/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2</obj>
      <fn>_dl_allocate_tls</fn>
      <dir>./elf/../elf</dir>
      <file>dl-tls.c</file>
      <line>629</line>
    </frame>
    <frame>
      <ip>0x541E606</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libc.so.6</obj>
      <fn>allocate_stack</fn>
      <dir>./nptl/./nptl</dir>
      <file>allocatestack.c</file>
      <line>429</line>
    </frame>
    <frame>
      <ip>0x541E606</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libc.so.6</obj>
      <fn>pthread_create@@GLIBC_2.34</fn>
      <dir>./nptl/./nptl</dir>
      <file>pthread_create.c</file>
      <line>655</line>
    </frame>
    <frame>
      <ip>0x531D34E</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgomp.so.1.0.0</obj>
    </frame>
    <frame>
      <ip>0x5313210</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgomp.so.1.0.0</obj>
      <fn>GOMP_parallel</fn>
    </frame>
    <frame>
      <ip>0x166259</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>void MatrixAssign&lt;double, SMatrix&lt;double&gt;, (Data)0, SMatrix&lt;double&gt;, (Data)0&gt;(Indexable&lt;double, SMatrix&lt;double&gt;, (Store)1, (Data)0, (Shape)2&gt;&amp;, Indexable&lt;double, SMatrix&lt;double&gt;, (Store)1, (Data)0, (Shape)2&gt; const&amp;)</fn>
      <dir>/home/janr/Code/qchem/../oml/include/oml/imp</dir>
      <file>matindex.h</file>
      <line>182</line>
    </frame>
    <frame>
      <ip>0x1656FE</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>SMatrix&lt;double&gt;::SMatrix&lt;SMatrix&lt;double&gt;, (Data)0&gt;(Indexable&lt;double, SMatrix&lt;double&gt;, (Store)1, (Data)0, (Shape)2&gt; const&amp;)</fn>
      <dir>/home/janr/Code/qchem/../oml/include/oml</dir>
      <file>smatrix.h</file>
      <line>239</line>
    </frame>
    <frame>
      <ip>0x1650FC</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>qchem_EigenSolverTests::GetOverlap() const</fn>
      <dir>/home/janr/Code/qchem/UnitTests</dir>
      <file>EigenSolverUT.C</file>
      <line>52</line>
    </frame>
    <frame>
      <ip>0x163EC7</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>qchem_EigenSolverTests_MinSVEVTests_Test::TestBody()</fn>
      <dir>/home/janr/Code/qchem/UnitTests</dir>
      <file>EigenSolverUT.C</file>
      <line>66</line>
    </frame>
    <frame>
      <ip>0x319916</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x311AAE</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x2E9867</ip>
      <obj>/home/janr/Code/qchem/qchemUT</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
  </stack>
</error>

<errorcounts>
  <pair>
    <count>1</count>
    <unique>0x2</unique>
  </pair>
  <pair>
    <count>1</count>
    <unique>0x1</unique>
  </pair>
  <pair>
    <count>1</count>
    <unique>0x0</unique>
  </pair>
</errorcounts>

<suppcounts>
</suppcounts>

</valgrindoutput>

